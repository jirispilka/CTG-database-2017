# -*- coding: utf-8 -*-
"""nestedCV.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JucJ8sdG15CXl5WbFzCW4XT_ANqDRV90
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings 

from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV
from sklearn import metrics


warnings.filterwarnings('ignore')
# %matplotlib inline

# data = load_breast_cancer()
# X = pd.DataFrame(data.data, columns=data.feature_names)
# y = data.target

from google.colab import drive
drive.mount('/content/drive')
PATH = '/content/drive/My Drive/thesis/data/data.csv'
# Reading the data:
df = pd.read_csv(PATH)


# Dropping unused columns:
df = df.drop(['year', 'segStart_samp', 'segEnd_samp', 'segStage', 'segStageII_index', 'segIndex', 'name'], axis=1)



# Dropping missing Values:
df = df.dropna()

# Target Vector:
df['pH'] = (df.pH <= 7.05).astype(int).ravel()


# Feature and target vectors:
y = df['pH'] # target
X = df.drop(['pH'], axis=1) # Feature matrix

cv = RepeatedStratifiedKFold(n_splits=3, n_repeats=2)

base_pipeline = Pipeline(steps=[
    ('scaler', StandardScaler()),
    ('clf', LogisticRegression(solver= 'saga', n_jobs=-1, class_weight='balanced'))
]
               )
base_param_grid = {
    'clf__C': 10.**np.arange(-12,0),
}

base_grid = GridSearchCV(base_pipeline, base_param_grid, n_jobs=-1, cv=cv, verbose=1, scoring='roc_auc').fit(X, y)

base_clf = base_grid.best_estimator_
print("Best parameter of (CV score = %0.3f) (AUC) :" % base_grid.best_score_)
print(base_grid.best_params_)

C = base_grid.cv_results_['param_clf__C'].data
auc = base_grid.cv_results_['mean_test_score']

auc.mean()

"""nested cross validation"""

auc_scores = []
for train, test in cv.split(X, y):
  inner_cv = RepeatedStratifiedKFold(n_splits=3, n_repeats=2)
  X_train = X.iloc[train]
  X_test = X.iloc[test]
  y_train = y.iloc[train]
  y_test = y.iloc[test]
  nested_grid = GridSearchCV(base_pipeline, base_param_grid, n_jobs=-1, cv=inner_cv, verbose=1, scoring='roc_auc').fit(X_train, y_train)
  clf = base_grid.best_estimator_
  y_proba = clf.predict_proba(X_test)[:, 1]
  fpr, tpr, threshold = metrics.roc_curve(y_test, y_proba)
  auc_scores.append(metrics.auc(fpr, tpr))

print(sum(auc_scores)/len(auc_scores))

